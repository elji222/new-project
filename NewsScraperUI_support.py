#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.14
# In conjunction with Tcl version 8.6
#    Jun 25, 2018 01:13:29 PM

#######################################
############## Imports: ###############
#######################################

import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

from NewsScrapingModule import *

#######################################
# Example Link: http://www.bizportal.co.il/gazandoil/news/article/744262
# The scraper fields are:
# self.url = scrapedUrl
# self.soup = GetLinkContents(self.url) if scrapedUrl is not None else None
# self.title = GetTitle(self.soup)
# self.publicationDetails = GetPublicationDetails(self.soup)
# self.description = GetDescription(self.soup)
# self.imageSource = GetThumbnailSource(self.soup)
# self.englishTitle = self.TranslateText(self.title)
# self.englishPublicationDetails = self.TranslateText(self.title)
# self.englishDescription = self.TranslateText(self.title)
#######################################

# Fonts and Styles:
tagTitle = "Title"
tagPublish = "Published"
tagDescription= "Description"

fontTitle = "-family {Segoe UI} -size 14 -weight bold -slant roman -underline 0 -overstrike 0"
fontPublish = "-family {Segoe UI} -size 10 -weight bold -slant italic -underline 0 -overstrike 0"
fontDescription = "-family {Segoe UI} -size 9 -weight normal -slant italic -underline 0 -overstrike 0"
#######################################

def on_copy_click():
    print('Copy Click was not yet implemented.')
    sys.stdout.flush()

def on_scrape_click():
    urlEntry = w.ScrapedUrlENTR
    urlText = urlEntry.get().replace('"','')
    scraper = NewsScraper(urlText)

    # Fill Scraped Fields:
    FillFields(scraper)

    # Enable Scraped Copy:
    if scraper.IsScrapeSuccessful():
        EnableItem(w.CopyBTN)
        EnableItem(w.TranslatedArticleSummaryTBX)
    else:
        DisableItem(w.CopyBTN)
        DisableItem(w.TranslatedArticleSummaryTBX)

    sys.stdout.flush()

def FillFields(scraper):
    ClearFields()
    # Original:
    article = w.ArticleSummaryTBX
    TextboxAppend(article, scraper.title, tagTitle)
    TextboxAppend(article, scraper.publicationDetails, tagPublish)
    TextboxAppend(article, scraper.description, tagDescription)
    # Translated:
    transArticle = w.TranslatedArticleSummaryTBX
    TextboxAppend(transArticle, scraper.englishTitle, tagTitle)
    TextboxAppend(transArticle, scraper.englishPublicationDetails, tagPublish)
    TextboxAppend(transArticle, scraper.englishDescription, tagDescription)
    # Image:
    RefreshThumbnailImage(scraper)

def ClearFields():
    article = w.ArticleSummaryTBX
    transArticle = w.TranslatedArticleSummaryTBX
    ClearTextBox(article)
    ClearTextBox(transArticle)
    pass

def CheckIsEnabled(item):
    state = str(item['state'])
    return state != 'disabled'

def TextboxAppend(tbx, text, tag = None):
    text = text if text else "" #Validate text to be inserted
    # handle Enable/Disable state of box.
    isEnabled = CheckIsEnabled(tbx)
    if not isEnabled:
        EnableItem(tbx)
    # Treat existance or abscense of tag:
    if tag:
        tbx.insert(END, text+"\n", tag)
    else:
        tbx.insert(END, text+"\n")
    # handle Enable/Disable state of box.
    if not isEnabled:
        DisableItem(tbx)

def ClearTextBox(tbx): 
    isEnabled = CheckIsEnabled(tbx)
    if not isEnabled:
        EnableItem(tbx)
        tbx.delete(1.0, END)
        DisableItem(tbx)
    else:
        tbx.delete(1.0, END)

def ClearEntry(entry):
    isEnabled = CheckIsEnabled(entry)
    if not isEnabled:
        EnableItem(entry)
        entry.delete(0, END)
        DisableItem(entry)
    else:
        entry.delete(0, END)
    
def DisableItem(item):
    item.configure(state="disabled")

def EnableItem(item):
    item.configure(state="normal")

def ConfigureTextboxForArticles(tbx, isRTL = False):
    tbx.tag_config(tagTitle, font=fontTitle)
    tbx.tag_config(tagPublish, font=fontPublish, foreground="red")
    tbx.tag_config(tagDescription, font=fontDescription)
    if isRTL:
        tbx.tag_config(tagTitle, justify='right')
        tbx.tag_config(tagPublish, justify='right')
        tbx.tag_config(tagDescription, justify='right')

def RefreshThumbnailImage(scraper):        
    size = (150,150)
    w.ScrapedImage = scraper.GetScrapedImage(size)
    w.ArticleThumbnailCanvas.create_image(0, 0, image=w.ScrapedImage, anchor=NW)

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    article = w.ArticleSummaryTBX
    transArticle = w.TranslatedArticleSummaryTBX
    ConfigureTextboxForArticles(article, True)
    ConfigureTextboxForArticles(transArticle)

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import NewsScraperUI
    NewsScraperUI.vp_start_gui()


